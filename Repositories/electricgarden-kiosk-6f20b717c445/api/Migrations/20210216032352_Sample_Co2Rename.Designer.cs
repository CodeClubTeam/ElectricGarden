// <auto-generated />
using System;
using KioskApi.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KioskApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210216032352_Sample_Co2Rename")]
    partial class Sample_Co2Rename
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KioskApi.Models.DeviceInstallation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasColumnName("serial")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("pk_device_installation");

                    b.HasIndex("Serial")
                        .IsUnique()
                        .HasName("ix_device_installation_serial");

                    b.ToTable("device_installation");
                });

            modelBuilder.Entity("KioskApi.Models.Projections.InactiveDevice", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastHeardFrom")
                        .HasColumnName("last_heard_from")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Serial")
                        .HasColumnName("serial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("inactive_devices");
                });

            modelBuilder.Entity("KioskApi.Models.Sample", b =>
                {
                    b.Property<int>("InstallationId")
                        .HasColumnName("installation_id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnName("timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("AmbientHumidity")
                        .HasColumnName("ambient_humidity")
                        .HasColumnType("float");

                    b.Property<double?>("BatteryVoltage")
                        .HasColumnName("battery_voltage")
                        .HasColumnType("float");

                    b.Property<double?>("Co2")
                        .HasColumnName("co2")
                        .HasColumnType("float");

                    b.Property<byte?>("ErrorCode")
                        .HasColumnName("error_code")
                        .HasColumnType("tinyint");

                    b.Property<double?>("Light")
                        .HasColumnName("light")
                        .HasColumnType("float");

                    b.Property<double?>("ProbeAirTemp")
                        .HasColumnName("probe_air_temp")
                        .HasColumnType("float");

                    b.Property<double?>("ProbeMoisture")
                        .HasColumnName("probe_moisture")
                        .HasColumnType("float");

                    b.Property<double?>("ProbeSoilTemp")
                        .HasColumnName("probe_soil_temp")
                        .HasColumnType("float");

                    b.Property<double?>("Rssi")
                        .HasColumnName("rssi")
                        .HasColumnType("float");

                    b.Property<double?>("Snr")
                        .HasColumnName("snr")
                        .HasColumnType("float");

                    b.HasKey("InstallationId", "Timestamp")
                        .HasName("pk_sample");

                    b.ToTable("sample");
                });

            modelBuilder.Entity("KioskApi.Models.Sample", b =>
                {
                    b.HasOne("KioskApi.Models.DeviceInstallation", "Installation")
                        .WithMany()
                        .HasForeignKey("InstallationId")
                        .HasConstraintName("fk_sample_device_installation_installation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
